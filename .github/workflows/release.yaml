name: Build and publish to crate.io and PyPI

permissions:
    contents: write
    id-token: write # Required for trusted publishing to PyPI

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build wheels
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    env:
      CARGO_PROFILE_RELEASE_LTO: "fat"
    steps:
      # Largely inspired by https://github.com/starship/starship/blob/35a0a20f5c4fea6a08e1b91ff631b089eef8fc50/.github/workflows/deploy.yml
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install maturin
        run: pip install maturin

      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --features pybindings --out dist
          manylinux: auto

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist
  
  sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: "3.10"
      - name: Install maturin
        run: pip install maturin
      - name: Build sdist
        run: maturin sdist --out dist
      - name: Upload source distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist

  changelog:
    name: Generate changelog and GitHub release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          registry-url: https://registry.npmjs.org/
          node-version: lts/*

      - name: Generate changelog and GitHub release
        run: npx changelogithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wasm-check:
    name: Check WASM Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Build for WASM (no PyO3)
        run: cargo build --target wasm32-unknown-unknown --no-default-features
  
  release-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, sdist]

    # environment:
    #   name: testpypi
    #   url: https://test.pypi.org/p/transportations-library

    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist/
          merge-multiple: true
        
      - name: Display structure of downloaded files
        run: ls -la dist/
      
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist/
          skip-existing: true
          verify-metadata: true

  release-crates-io:
    name: Release crates.io
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: crates.io
      url: ${{ steps.set_url.outputs.env_url }}
    needs: [build, sdist, wasm-check]
    steps:
      - uses: actions/checkout@v5

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

      - name: Set environment url
        id: set_url
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "env_url=https://crates.io/crates/transportations_library/$VERSION" >> $GITHUB_OUTPUT

      - name: Dry run publish check
        run: cargo publish --locked --dry-run

      - name: cargo publish
        run: cargo publish --locked


  release-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: false
    environment:
      name: PyPI
      url: ${{ steps.set_url.outputs.env_url }}
    needs: [build, sdist, changelog]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: dist/
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

      - name: Set environment url
        id: set_url
        run: |
            PACKAGE_NAME=$(python - << 'EOF'
            import tomllib
            with open('pyproject.toml', 'rb') as f:
                print(tomllib.load(f)['project']['name'])
            EOF
            )
            VERSION=$(echo $GITHUB_REF | sed -e "s#refs/tags/v##g")
            echo "env_url=https://pypi.org/project/$PACKAGE_NAME/$VERSION" >> $GITHUB_OUTPUT
