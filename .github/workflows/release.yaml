name: Build and publish to PyPI

permissions:
    contents: write

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: maturin-x86_64-unknown-linux-gnu.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            name: maturin-x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: maturin-x86_64-pc-windows-msvc.zip
          - target: i686-pc-windows-msvc
            os: windows-latest
            name: maturin-i686-pc-windows-msvc.zip
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: maturin-aarch64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    env:
      CARGO_PROFILE_RELEASE_LTO: "fat"
    steps:
      # Largely inspired by https://github.com/starship/starship/blob/35a0a20f5c4fea6a08e1b91ff631b089eef8fc50/.github/workflows/deploy.yml
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      # Those two will also create target/${{ matrix.target }}/maturin
      - name: Build wheel (Linux)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: |
          cargo build --release --target ${{ matrix.target }}

      # ring doesn't support aarch64 windows yet
      - name: Build wheel (windows aarch64)
        if: matrix.target == 'aarch64-pc-windows-msvc'
        run: cargo build --release --target ${{ matrix.target }} --no-default-features --features full,native-tls

      - name: Build wheel (without sdist)
        if: ${{ matrix.target != 'x86_64-unknown-linux-gnu' && matrix.target != 'aarch64-pc-windows-msvc' }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build wheel (macOS universal2)
        if: matrix.target == 'x86_64-apple-darwin'
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          MACOSX_DEPLOYMENT_TARGET: "10.12"
        run: |
          # set SDKROOT for C dependencies like ring and bzip2
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          rustup target add aarch64-apple-darwin
          cargo build --release --target universal2-apple-darwin

      - name: Archive binary (windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }} ${{ github.event.repository.name }}.exe
          cd -

      - name: Archive binary (linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} ${{ github.event.repository.name }}
          cd -

      - name: Archive binary (macOS aarch64)
        if: matrix.os == 'macos-latest'
        run: |
          cd target/aarch64-apple-darwin/release
          tar czvf ../../../maturin-aarch64-apple-darwin.tar.gz ${{ github.event.repository.name }}
          cd -

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: dist

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            *.tar.gz
            *.zip

  changelog:
    name: Generate changelog and GitHub release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org/
          node-version: lts/*

      - name: Generate changelog and GitHub release
        run: npx changelogithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-crates-io:
    name: Release crates.io
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: crates.io
      url: ${{ steps.set_url.outputs.env_url }}
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: cargo login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: cargo publish
        run: cargo publish
      - name: Set environment url
        id: set_url
        run: |
          VERSION=$(echo $GITHUB_REF | sed -e "s#refs/tags/v##g")
          echo "env_url=https://crates.io/crates/maturin/$VERSION" >> $GITHUB_OUTPUT

  release-pypi:
    permissions:
      # Used to sign the release's artifacts
      # and upload to PyPI using trusted publisher.
      id-token: write
      # Used to upload release artifacts.
      contents: write
      # Use to generate artifact attestation.
      attestations: write
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: ${{ steps.set_url.outputs.env_url }}
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            ./*.tar.gz
            ./*.whl
      - uses: actions/setup-python@v5
        if: startsWith(github.ref, 'refs/tags/')
        with:
          python-version: "3.10"
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      - name: Set environment url
        id: set_url
        run: |
          VERSION=$(echo $GITHUB_REF | sed -e "s#refs/tags/v##g")
          echo "env_url=https://pypi.org/project/maturin/$VERSION" >> $GITHUB_OUTPUT

  release-github:
    permissions:
      # Used to sign the release's artifacts.
      id-token: write
      # Used to upload release artifacts.
      contents: write
      # Use to generate artifact attestation.
      attestations: write
    name: Publish to GitHub releases
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: binaries-*
          merge-multiple: true
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            ./*.tar.gz
            ./*.zip
            ./*.deb
      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
            *.deb
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true
